version: '3.8'

services:
  proxy:
    image: traefik:v2.2
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    ports:
      - "80:80"
      - "8090:8080"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var STACK_NAME
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${STACK_NAME?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80

  frontend:
    build:
      context: ./frontend
      dockerfile: ./docker/Dockerfile.dev
    image: ${FRONTEND_IMAGE}:${CURRENT_VERSION}
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${STACK_NAME?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

  backend:
    build:
      context: ./backend
      dockerfile: ./docker/Dockerfile
    image: ${BACKEND_IMAGE}:${CURRENT_VERSION}
    command: bash -c "alembic upgrade head && uvicorn medstone_backend.main:app --reload --host 0.0.0.0 --port 8000"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRES=${JWT_ACCESS_TOKEN_EXPIRES}
      - SQLALCHEMY_ECHO=${SQLALCHEMY_ECHO}
      - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SOCKETIO_MESSAGE_QUEUE=${SOCKETIO_MESSAGE_QUEUE}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app:cached
      - /var/run/postgresql:/var/run/postgresql
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${STACK_NAME?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=8000
    restart: unless-stopped
    depends_on:
      - redis

  # celery:
  #   build:
  #     context: ./backend
  #     dockerfile: ./docker/Dockerfile
  #   image: ${BACKEND_IMAGE}:${CURRENT_VERSION}
  #   command: celery worker -A medstone_backend.main:celery_app -l info -Q default_queue
  #   environment:
  #     - JWT_SECRET_KEY=${JWT_SECRET_KEY}
  #     - JWT_ACCESS_TOKEN_EXPIRES=${JWT_ACCESS_TOKEN_EXPIRES}
  #     - SQLALCHEMY_ECHO=${SQLALCHEMY_ECHO}
  #     - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}
  #     - CELERY_BROKER_URL=${CELERY_BROKER_URL}
  #     - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
  #     - SOCKETIO_MESSAGE_QUEUE=${SOCKETIO_MESSAGE_QUEUE}
  #   depends_on:
  #     - redis

  celery_beat:
    build:
      context: ./backend
      dockerfile: ./docker/Dockerfile
    image: ${BACKEND_IMAGE}:${CURRENT_VERSION}
    command: celery -A medstone_backend.main:celery_app beat
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRES=${JWT_ACCESS_TOKEN_EXPIRES}
      - SQLALCHEMY_ECHO=${SQLALCHEMY_ECHO}
      - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SOCKETIO_MESSAGE_QUEUE=${SOCKETIO_MESSAGE_QUEUE}
    depends_on:
      - redis

  postgresql:
    image: "postgres:${POSTGRES_IMAGE_TAG}"
    volumes:
      - database-data:/var/lib/postgresql/data/
    ports:
      - "5431:5432"
    environment:
      - POSTGRES_USER=medstone_template
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=medstone_template
    restart: unless-stopped

  redis:
    image: "redis:${REDIS_IMAGE_TAG}"
    restart: unless-stopped

volumes:
  database-data:

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
